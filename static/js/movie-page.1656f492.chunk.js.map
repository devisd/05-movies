{"version":3,"file":"static/js/movie-page.1656f492.chunk.js","mappings":"uNA2DA,EAvDkB,WAChB,OAAsCA,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,IAAgB,IAAxD,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,UAAY,GACrCC,GAAWC,EAAAA,EAAAA,MACjBC,QAAQC,IAAIL,GAiBZ,OACE,iCACE,wCAEA,kBAAMM,SATW,SAAAC,GACnBA,EAAEC,iBACFd,EAAeD,IACfgB,EAAAA,EAAAA,IAAoBhB,GAAaiB,KAAKd,EACvC,EAKG,WACE,mBAAQe,KAAK,SAAb,qBACA,kBACEC,MAAOnB,EACPoB,SAvBa,SAAAN,GACnBb,EAAea,EAAEO,OAAOF,OAGtBb,EADEN,EACc,CAAEO,MAAOO,EAAEO,OAAOF,OAElB,GAEnB,EAgBOD,KAAK,OACLI,aAAa,MACbC,YAAY,kBAIhB,wBACGrB,GACCA,EAAOsB,KAAI,SAAAC,GACT,OACE,yBACE,UAAC,KAAD,CAAMC,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAMpB,GAAxC,WACE,wBAAKgB,EAAMK,SACX,uBAAIL,EAAMM,mBAHLN,EAAME,GAOlB,QAIV,C,mMCvDDK,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAM,mCAGL,SAAeC,IAAtB,+B,aAAO,O,0BAAA,yGACkBF,IAAAA,IAAA,uCAA0CC,IAD5D,cACCE,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kEAMA,SAAerB,EAAtB,kC,aAAO,O,0BAAA,WAAmChB,GAAnC,4FACkBgC,IAAAA,IAAA,gCACIC,EADJ,iCACgCjC,EADhC,gCADlB,cACCmC,EADD,yBAIEA,EAASC,KAAKC,SAJhB,kEAQA,SAAeC,EAAtB,kC,aAAO,O,0BAAA,WAAmCC,GAAnC,4FACkBP,IAAAA,IAAA,iBACXO,EADW,oBACQN,EADR,oBADlB,cACCE,EADD,yBAIEA,EAASC,MAJX,kEAQA,SAAeI,EAAtB,kC,aAAO,O,0BAAA,WAAgCD,GAAhC,4FACkBP,IAAAA,IAAA,iBACXO,EADW,4BACgBN,EADhB,oBADlB,cACCE,EADD,yBAIEA,EAASC,KAAKK,MAJhB,kEAQA,SAAeC,EAAtB,+CAAO,OAAP,0BAAO,WAAmCH,GAAnC,4FACkBP,IAAAA,IAAA,iBACXO,EADW,4BACgBN,EADhB,2BADlB,cACCE,EADD,yBAIEA,EAASC,KAAKC,SAJhB,kE","sources":["components/MoviesPage/MoviesPage.jsx","services/movieSearch.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useSearchParams, Link, useLocation } from 'react-router-dom';\nimport { fetchOnSearchMovies } from '../../services/movieSearch';\n\nconst MoviePage = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams('');\n  const query = searchParams.get('query') || '';\n  const location = useLocation();\n  console.log(query);\n\n  const handleChange = e => {\n    setSearchQuery(e.target.value);\n\n    if (searchQuery) {\n      setSearchParams({ query: e.target.value });\n    } else {\n      setSearchParams('');\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setSearchQuery(searchQuery);\n    fetchOnSearchMovies(searchQuery).then(setMovies);\n  };\n  return (\n    <>\n      <h1>Movie Page</h1>\n\n      <form onSubmit={handleSubmit}>\n        <button type=\"submit\">Search</button>\n        <input\n          value={searchQuery}\n          onChange={handleChange}\n          type=\"text\"\n          autoComplete=\"off\"\n          placeholder=\"search...\"\n        />\n      </form>\n\n      <ul>\n        {movies &&\n          movies.map(movie => {\n            return (\n              <li key={movie.id}>\n                <Link to={`${movie.id}`} state={{ from: location }}>\n                  <h2>{movie.title}</h2>\n                  <p>{movie.vote_average}</p>\n                </Link>\n              </li>\n            );\n          })}\n      </ul>\n    </>\n  );\n};\n\nexport default MoviePage;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY = '60778458bdbdfa7e14ca7e73fe4a1fef';\n\n// // список самых популярных фильмов на сегодня для создания коллекции на главной странице.\nexport async function fetchOnTrending() {\n  const response = await axios.get(`/trending/movie/week?api_key=${KEY}`);\n  return response.data.results;\n}\n\n// поиск кинофильма по ключевому слову на странице фильмов.\nexport async function fetchOnSearchMovies(searchQuery) {\n  const response = await axios.get(\n    `/search/movie?api_key=${KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`\n  );\n  return response.data.results;\n}\n\n// запрос полной информации о фильме для страницы кинофильма.\nexport async function fetchOnMovieDetails(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n  return response.data;\n}\n\n// запрос информации о актёрском составе для страницы кинофильма.\nexport async function fetchOnMovieCast(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n  return response.data.cast;\n}\n\n// запрос обзоров для страницы кинофильма.\nexport async function fetchOnMovieReviews(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n}\n"],"names":["useState","searchQuery","setSearchQuery","movies","setMovies","useSearchParams","searchParams","setSearchParams","query","get","location","useLocation","console","log","onSubmit","e","preventDefault","fetchOnSearchMovies","then","type","value","onChange","target","autoComplete","placeholder","map","movie","to","id","state","from","title","vote_average","axios","KEY","fetchOnTrending","response","data","results","fetchOnMovieDetails","movieId","fetchOnMovieCast","cast","fetchOnMovieReviews"],"sourceRoot":""}