{"version":3,"file":"static/js/reviews-page.c6db6679.chunk.js","mappings":"8MA4CA,EAxCgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAoBN,GAASO,KAAKH,EACnC,GAAE,CAACJ,IAEkB,IAAlBG,EAAOK,QAEP,iCACE,qCAEA,kDAKF,iCACE,qCAEA,wBACGL,EAAOM,KAAI,SAAAC,GACV,OACE,2BACE,0BACGA,EAAGC,OADN,KACgBD,EAAGE,eAAeC,SADlC,QAGA,uBAAIH,EAAGI,WACP,mBACA,oBANOJ,EAAGK,GASf,QAKV,C,mMCxCDC,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAM,mCAGL,SAAeC,IAAtB,+B,aAAO,O,0BAAA,yGACkBF,IAAAA,IAAA,uCAA0CC,IAD5D,cACCE,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kEAMA,SAAeC,EAAtB,kC,aAAO,O,0BAAA,WAAmCC,GAAnC,4FACkBP,IAAAA,IAAA,gCACIC,EADJ,iCACgCM,EADhC,gCADlB,cACCJ,EADD,yBAIEA,EAASC,KAAKC,SAJhB,kEAQA,SAAeG,EAAtB,kC,aAAO,O,0BAAA,WAAmCxB,GAAnC,4FACkBgB,IAAAA,IAAA,iBACXhB,EADW,oBACQiB,EADR,oBADlB,cACCE,EADD,yBAIEA,EAASC,MAJX,kEAQA,SAAeK,EAAtB,kC,aAAO,O,0BAAA,WAAgCzB,GAAhC,4FACkBgB,IAAAA,IAAA,iBACXhB,EADW,4BACgBiB,EADhB,oBADlB,cACCE,EADD,yBAIEA,EAASC,KAAKM,MAJhB,kEAQA,SAAepB,EAAtB,+CAAO,OAAP,0BAAO,WAAmCN,GAAnC,4FACkBgB,IAAAA,IAAA,iBACXhB,EADW,4BACgBiB,EADhB,2BADlB,cACCE,EADD,yBAIEA,EAASC,KAAKC,SAJhB,kE","sources":["components/Reviews/Reviews.jsx","services/movieSearch.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchOnMovieReviews } from '../../services/movieSearch';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [review, setReview] = useState([]);\n\n  useEffect(() => {\n    fetchOnMovieReviews(movieId).then(setReview);\n  }, [movieId]);\n\n  if (review.length === 0) {\n    return (\n      <>\n        <h1>Reviews</h1>\n\n        <h2>Sorry, no Reviews</h2>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <h1>Reviews</h1>\n\n        <ul>\n          {review.map(el => {\n            return (\n              <li key={el.id}>\n                <h2>\n                  {el.author} ({el.author_details.username})\n                </h2>\n                <p>{el.content}</p>\n                <br />\n                <br />\n              </li>\n            );\n          })}\n        </ul>\n      </>\n    );\n  }\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY = '60778458bdbdfa7e14ca7e73fe4a1fef';\n\n// // список самых популярных фильмов на сегодня для создания коллекции на главной странице.\nexport async function fetchOnTrending() {\n  const response = await axios.get(`/trending/movie/week?api_key=${KEY}`);\n  return response.data.results;\n}\n\n// поиск кинофильма по ключевому слову на странице фильмов.\nexport async function fetchOnSearchMovies(searchQuery) {\n  const response = await axios.get(\n    `/search/movie?api_key=${KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`\n  );\n  return response.data.results;\n}\n\n// запрос полной информации о фильме для страницы кинофильма.\nexport async function fetchOnMovieDetails(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n  return response.data;\n}\n\n// запрос информации о актёрском составе для страницы кинофильма.\nexport async function fetchOnMovieCast(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n  return response.data.cast;\n}\n\n// запрос обзоров для страницы кинофильма.\nexport async function fetchOnMovieReviews(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n}\n"],"names":["movieId","useParams","useState","review","setReview","useEffect","fetchOnMovieReviews","then","length","map","el","author","author_details","username","content","id","axios","KEY","fetchOnTrending","response","data","results","fetchOnSearchMovies","searchQuery","fetchOnMovieDetails","fetchOnMovieCast","cast"],"sourceRoot":""}